#ifndef QUICKCENTRALITYTABLE_20180919_H
#define QUICKCENTRALITYTABLE_20180919_H

const Int_t nBins = 200;
const Double_t bins[nBins+1] = {0, 10.8085, 11.2645, 11.6044, 11.9051, 12.1733, 12.445, 12.7246, 13.0051, 13.2824, 13.5692, 13.8787, 14.1869, 14.5065, 14.8372, 15.1772, 15.5388, 15.904, 16.2914, 16.7049, 17.1334, 17.566, 18.0272, 18.5174, 19.0214, 19.5466, 20.1049, 20.7044, 21.3208, 21.9991, 22.7412, 23.5331, 24.357, 25.206, 26.1396, 27.1474, 28.2426, 29.3998, 30.698, 32.0879, 33.5844, 35.1257, 36.7684, 38.5521, 40.4164, 42.3712, 44.3658, 46.4356, 48.6165, 50.861, 53.205, 55.6381, 58.1084, 60.7157, 63.2524, 65.8785, 68.5102, 71.279, 74.0809, 77.1935, 80.3807, 83.5944, 87.0015, 90.5289, 93.9451, 97.6477, 101.414, 105.46, 109.796, 114.195, 118.655, 123.265, 128.065, 132.997, 138.158, 143.469, 148.987, 154.57, 160.41, 166.438, 172.839, 179.336, 185.9, 192.928, 200.046, 207.128, 214.447, 222.455, 230.388, 238.637, 247.353, 256.096, 264.753, 274.056, 283.579, 293.293, 303.321, 313.397, 323.682, 334.413, 345.18, 356.246, 367.681, 379.791, 392.131, 403.779, 416.33, 429.104, 442.289, 456.117, 470.192, 483.965, 498.498, 513.286, 528.411, 543.608, 558.869, 575.08, 591.086, 607.787, 625.259, 642.71, 660.736, 678.732, 697.94, 717.391, 736.828, 756.232, 775.43, 796.267, 817.126, 838.373, 860.101, 882.152, 904.689, 927.01, 950.609, 974.737, 998.981, 1023.58, 1049.15, 1074.25, 1100.5, 1127.86, 1154.98, 1183.09, 1210.36, 1237.92, 1267.15, 1295.71, 1325.17, 1356.36, 1388.35, 1420.48, 1453.79, 1486.69, 1520.92, 1555.7, 1590.21, 1624.38, 1660.34, 1697.74, 1736.25, 1774.17, 1813.08, 1853.69, 1892.72, 1934.58, 1975.98, 2017.92, 2062.85, 2108.7, 2154.59, 2201.34, 2248.95, 2298.14, 2347.78, 2397.31, 2449.1, 2502.24, 2556.42, 2611.56, 2670.62, 2730.06, 2791.43, 2853.5, 2916.39, 2980.91, 3046.22, 3115.67, 3188.36, 3258.31, 3333.12, 3408.95, 3490.7, 3578.31, 3671.88, 3777.07, 3903.2, 4085.16, 10000};

Int_t getHiBinFromHiHF(const Double_t hiHF)
{
  Int_t binPos = -1;
  for(int i = 0; i < nBins; ++i){
    if(hiHF >= bins[i] && hiHF < bins[i+1]){
      binPos = i;
      break;
    }
  }
  
  binPos = nBins - 1 - binPos;
  
  return (Int_t)(200*((Double_t)binPos)/((Double_t)nBins));
}
#endif
